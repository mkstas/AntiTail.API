// <auto-generated />
using System.Numerics;
using AntiTail.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AntiTail.Persistence.Migrations
{
    [DbContext(typeof(AntiTailDbContext))]
    [Migration("20250926054554_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AntiTail.Domain.Models.SubjectEntity", b =>
                {
                    b.Property<BigInteger>("Id")
                        .HasColumnType("numeric");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<BigInteger>("UserId")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("AntiTail.Domain.Models.SubtaskEntity", b =>
                {
                    b.Property<BigInteger>("Id")
                        .HasColumnType("numeric");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<BigInteger>("TaskId")
                        .HasColumnType("numeric");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.ToTable("Subtasks");
                });

            modelBuilder.Entity("AntiTail.Domain.Models.TaskEntity", b =>
                {
                    b.Property<BigInteger>("Id")
                        .HasColumnType("numeric");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int?>("Grade")
                        .HasColumnType("integer");

                    b.Property<BigInteger>("SubjectId")
                        .HasColumnType("numeric");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("AntiTail.Domain.Models.UserEntity", b =>
                {
                    b.Property<BigInteger>("Id")
                        .HasColumnType("numeric");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("AntiTail.Domain.Models.SubjectEntity", b =>
                {
                    b.HasOne("AntiTail.Domain.Models.UserEntity", "User")
                        .WithMany("Subjects")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AntiTail.Domain.Models.SubtaskEntity", b =>
                {
                    b.HasOne("AntiTail.Domain.Models.TaskEntity", "Task")
                        .WithMany("Subtasks")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");
                });

            modelBuilder.Entity("AntiTail.Domain.Models.TaskEntity", b =>
                {
                    b.HasOne("AntiTail.Domain.Models.SubjectEntity", "Subject")
                        .WithMany("Tasks")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("AntiTail.Domain.Models.SubjectEntity", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("AntiTail.Domain.Models.TaskEntity", b =>
                {
                    b.Navigation("Subtasks");
                });

            modelBuilder.Entity("AntiTail.Domain.Models.UserEntity", b =>
                {
                    b.Navigation("Subjects");
                });
#pragma warning restore 612, 618
        }
    }
}
